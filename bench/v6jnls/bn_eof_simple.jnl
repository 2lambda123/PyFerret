! bn_eof_simple
! Define a simple function with two known functions.
! decompose with EOFs.
! 7/2012 
! In version 6.8 (double precision), the old eof functions are not available
! Run the script calling eofsvd functions and exit, leaving old eof function calls.
! 11/2017 - still try to test old eof functions, if they are re-implemented

! Define two locations.
def axis /X=1:2:1 xaxis
def axis /Y=1:1:1 yaxis

! Thinking of the time axis as number of months.
def axis /T=0.0:59.75:0.25 taxis
def grid /X=xaxis /Y=yaxis /T=taxis xytgrid
set grid xytgrid

! Make standing waves with a period of 12 months.
let cosT = cos(T * 3.141592653589793 / 6.0)
let sinT = sin(T * 3.141592653589793 / 6.0)

! Put a standing wave at each location.
! The two waves are orthonormal and zero-mean over time. 
let spacetime = if (i eq 1) then cosT else sinT + 1
show grid spacetime

show func eofsvd_stat
! Run each of the eof functions and show the results.
! Both are equally significant.  Eigenvalues should be 0.5.
! Other EOF descriptions do not divide the covariance
! matrix by the number of time values, in which case the
! the eigenvalues will be much larger, but still equal
! to each other.
list eofsvd_stat(spacetime)

show func eofsvd_space
! Ideally the vectors (0.0, sqrt(0.5)) and (sqrt(0.5), 0.0),
! but might be mixed by rotation.
! This is if the EOF functions are in units of the original data,
! thus the eigenvectors times the square-root of the eigenvalue.
! EOF vectors are always orthogonal to each other.
let eofs = eofsvd_space(spacetime[I=1:2])
load eofs
let v1 = eofs[I=1]
show grid v1
let v2 = eofs[I=2]
show grid v2
list dot_t(v1, v1)
list dot_t(v1, v2)
list dot_t(v2, v1)
list dot_t(v2, v2)
 
show func eofsvd_tfunc
! Ideally sqrt(2.0) * (cosT, sinT), but may be mixed by rotation.  
! TAF vectors are always orthogonal to each other.
let tafs = eofsvd_tfunc(spacetime[I=1:2])
load tafs
let v1 = tafs[I=1]
show grid v1
let v2 = tafs[I=2]
show grid v2
list dot_t(v1, v1)
list dot_t(v1, v2)
list dot_t(v2, v1)
list dot_t(v2, v2)

! The sum over all significant EOFs of the outer product of 
! EOF(i) and TAF(i) should return the zero-time-meaned data 
! (original data with the time-series mean subtracted to give 
! a zero mean for each time series).
! In this case, EOF(1) o TAF(1) + EOF(2) o TAF(2) = (cosT, sinT)

! Missing-data cases
!
! If there are locations where the timeseries is all missing or incomplete 
! (as in a dataset where missing data represents land), return a result 
! based only locations with complete timeseries.

def axis /X=1:3:1 xaxis
let spacetime = if (i eq 1) then cosT else sinT + 1
let space12 = if i ne 3 then spacetime

list eofsvd_stat(space12)

let eofs = eofsvd_space(space12[I=1:3])
load eofs
let v1 = eofs[I=1]
show grid v1
let v2 = eofs[I=2]
show grid v2
list dot_t(v1, v1)
list dot_t(v1, v2)
list dot_t(v2, v1)
list dot_t(v2, v2)

let tafs = eofsvd_tfunc(space12[I=1:3])
load tafs
let v1 = tafs[I=1]
show grid v1
let v2 = tafs[I=2]
show grid v2
list dot_t(v1, v1)
list dot_t(v1, v2)
list dot_t(v2, v1)
list dot_t(v2, v2)

! If there are no complete time series, the functions should bail with an error

let spacegap = if L ne 2 then spacetime

set mode ignore

list eofsvd_stat(spacegap)
list eofsvd_space(spacegap)
list eofsvd_tfunc(spacegap)

set mode/last ignore

! -----------------------------------------------
! previous commands that called eof_space, eof_stat, eof_tfunc
! these functions all now bail out - do not work properly in double precision

set mode ignore

def axis /X=1:2:1 xaxis
let spacetime = if (i eq 1) then cosT else sinT + 1

show func eof_stat
! Run each of the eof functions and show the results.
! Both are equally significant.  Eigenvalues should be 0.5.
! Other EOF descriptions do not divide the covariance
! matrix by the number of time values, in which case the
! the eigenvalues will be much larger, but still equal
! to each other.
list eof_stat(spacetime, 1.0)

show func eof_space
! Ideally the vectors (0.0, sqrt(0.5)) and (sqrt(0.5), 0.0),
! but might be mixed by rotation.
! This is if the EOF functions are in units of the original data,
! thus the eigenvectors times the square-root of the eigenvalue.
! EOF vectors are always orthogonal to each other.
let eofs = eof_space(spacetime[I=1:2], 1.0)
load eofs
let v1 = eofs[I=1]
show grid v1
let v2 = eofs[I=2]
show grid v2
list dot_t(v1, v1)
list dot_t(v1, v2)
list dot_t(v2, v1)
list dot_t(v2, v2)

show func eof_tfunc
! Ideally sqrt(2.0) * (cosT, sinT), but may be mixed by rotation.  
! TAF vectors are always orthogonal to each other.
let tafs = eof_tfunc(spacetime[I=1:2], 1.0)
load tafs
let v1 = tafs[I=1]
show grid v1
let v2 = tafs[I=2]
show grid v2
list dot_t(v1, v1)
list dot_t(v1, v2)
list dot_t(v2, v1)
list dot_t(v2, v2)

set mode/last ignore

! The sum over all significant EOFs of the outer product of 
! EOF(i) and TAF(i) should return the zero-time-meaned data 
! (original data with the time-series mean subtracted to give 
! a zero mean for each time series).
! In this case, EOF(1) o TAF(1) + EOF(2) o TAF(2) = (cosT, sinT)

! clean-up
set grid abstract
can var /all
can grid xytgrid
