Introduction
------------

Thank you for your interest in Ferret and in compiling Ferret.  This document 
is designed to assist in getting Ferret compiled and linked on your system.  
NOTE: These procedures have only be confirmed to work on Linux RedHat systems. 
These are the only systems we have access to, and therefore the only systems 
we have compiled and linked Ferret (recently) on. Collaborators have used 
these procedures with minor modifications for building Ferret on recent Mac 
operating systems and Solaris 10.

Part of the reason for distributing source code is to draw upon the expertise 
of the Ferret users in order to help port Ferret  to other operating systems.  
If you link Ferret on an operating system other than the above, please let us 
know. For the above operating systems, Ferret can be picked up in binary from 
anonymous ftp at:

	http://Ferret.pmel.noaa.gov/Ferret/downloads


What is needed
--------------

Besides Fortran and C compilers, the following libraries are necessary to compile
and link Ferret:
 
	* netCDF library (version 4.2+ recommended; version 3.2 can be used)
        * HDF libraries (the correct version as recommended with the 
	               netCDF build instructions. Not needed if linking 
		       with netCDF3.2)
        * Xgks libraries (source included)
	* Readline library (included in Unix installations)

Notes:
* For building the libraries, and Ferret, we have recently used gfortran and gcc. 

* You need to link with a library to access netCDF datasets. The library 
netCDF4.1 or higher is recommended. (netCDF3.6 works fine but is not recommended 
as it does not give access to remote OPeNDAP datasets or HDF-5 formatted files). 
The netCDF downloads can be found here: 
http://www.unidata.ucar.edu/software/netCDF/ 
Build netCDF4.x with hdf5, version 1.8.4 (or higher, as recommended with the 
netCDF source code you download); and with --enable-fortran in the configuration.
Then configure netCDF4.2 with the hdf libraries specified,  --enable-netCDF-4  --enable-dap for
for netCDF-4 features and OPeNDAP dataset access.

The current official release of Ferret is linked with netCDF4.2 and has syntax 
for writing netCDF4 datasets (hdf5 chunking and compression.)  See the release 
notes for Ferret v6.6. at 
http://porter.pmel.noaa.gov/Ferret/home/documentation/v6-6-release-notes

(In the platform_specific_flags files, you will see references to DODS libraries.
This is from the previous builds which used OPeNDAP libraries from opendap.org. 
These references will be removed in future but are left in for the time being; 
as the transition from the opendap.org libraries to the Unidata netCDF-4 
libraries is fairly recent.)

As mentioned below, the Ferret Makefiles reference an area called TMAP_LOCAL.  
This area is assumed to be the place where include files and libraries not 
inherent to the operating system, yet necessary to compile and link Ferret, 
reside.


SOURCE DIRECTORY OVERVIEW
-------------------------

			|-- fer
			|
			|-- fmt
			|
			|-- gksm2ps
			|
	|-Ferret_ROOT-|	|-- lib
			|
			|-- ppl
			|
			|-- xgks
			|
			|-- bench
			|
			|-- external_functions


where:

	fer  	  is the main Ferret compilation directory.  This is 
		  where the Makefiles and platform-specific files reside
	
	fmt 	  is the area of source for basic Ferret functions, including
		  I/O, readline, etc.

	gksm2ps   is the metafile translator source

	lib	  is where the Ferret-created libraries will be stored after 
		  compilation

	ppl 	  is the PlotPlus source code
	
	xgks 	  is the Xgks graphics package source code
	
	bench     contains the benchmark suite for testing the Ferret
		  executable once it has been linked
	
	external_functions  contains the code which describes and gives
			    examples of Ferret external function 
			    framework 

To compile
----------

1) compile xgks (If Xgks is already installed, you may skip this step)
	a) run configure
		> ./configure
		You may be prompted to create a CUSTOMIZE.YOUR_HOSTYYPE file, i.e. 
		CUSTOMIZE.x86_64-linux.
	b) compile sources
		> make
	

2)Compile and link Ferret
	> cd $Ferret_ROOT/fer
	a) First, you will need to create a file called 
		platform_specific_flags_flags.mk.YOUR_HOSTTYPE
		
	   This file contains fortran and c flags,as well as pointers to system 
	   libraries, etc.  Look at one of the existing files for an example of 
	   what should be included. The most recent examples of these files are 
	   platform_specific_flags.mk.x86_64-linux and 
	   platform_specific_flags.mk.i386-linux  You will need to create such a 
	   file for your system, with the desired compilers, compiler flags, 
	   locations of libraries and include files, and definitions for linking 
	   with the libraries. List the location(s) of your netCDF and HDF 
	   libraries in netCDF4_DIR. To find the compiler flags and libraries 
	   needed for building Ferret with netCDF, look at where you built the 
	   netCDF library. In the bin/ directory the tool nc-config can be used 
	   to get compiler flags and libraries needed for linking a Fortran 
	   program with netCDF. To see the available options, run 

	   nc-config --help 
	   
	   The compiler flags also need to be in the ppl/ directory in a
	   platform_specific_flags file.

	b) Compile and link 
	> make ncdf4
		this will compile sources in the fmt, ppl and fer directories
		and will also link Ferret. The executable will be Ferret_c
		
	  Other targets:
	> make debug
		compiles with debug flags turned on
		
	> make 
		links with the netCDF 3 library

	> make DODS_only 
		for linking with old OPeNDAP libraries


3) Create External_functions .so files  (optional)
	> cd $Ferret_ROOT/external_functions
	> make
		This will compile the suite of external_function utility 
		routines and the example external functions included in the 
		Ferret distribution.

	If you wish, define an environment variable FER_LOCAL_EXTFCNS; and then 
	> make install
		will copy the compiled functions to that directory.

	Make sure that the environment variable FER_EXTERNAL_FUNCTIONS points 
	to the directory or directories where the compiled external functions 
	reside.


4) In gksm2ps/  modify the Makefile according to your operating system, and 
run make. Gksm2ps translates plot metafiles into postcript files. It is run 
via the command-line directive Fprint


5) Get the environment tar file for one of our linux versions, from the Ferret 
Downloads pages. You will need the fonts files, go scripts, and palette files. 
See the bin/Finstall script and the Ferret installation instructions for 
details about setting up the environment to run Ferret.


6) Run Benchmark suite
	> cd $Ferret_ROOT/bench
	> run_all

	The run_all script will ask a few questions (such as where the 
	executable to test resides) and then launch into the benchmark
	routines.  When the test suite completes, you can compare the 
	results found in newly create all* files w/ the official* log 
	files.  One of the benchmark tests is concerned with the
	External Functions mentioned above.  If the External Functions
	aren't compiled, there will be a large chunk of output found in
	the official* log files that won't be in the newly created ones.


NOTES
-----

Included in the main directory ($Ferret_ROOT) is a file called

	IFDEF_DESCRIPTION

which details the usage of the different ifdef/preprocessor directives
used in the Ferret code.  This is meant to assist in choosing the
correct options for your system.

This package, including the documentation, represents the initial
attempt at source distribution for Ferret.  A crucial aspect of making
this source distribution more complete and usable will be feedback
from those who have attempted compiling and linking Ferret.

Also, If you plan any modifications to the functionality of Ferret, please 
consider contacting us first.  We may be able to save you some time and
frustration with our in-depth knowledge of the code.

Questions, problems or suggestions can be directed to:

	contact_Ferret@noaa.gov

Good luck, and happy Ferreting!

