\CANCEL MODE VERIFY
! Description: A brief tutorial introduction to DSG capabilities in PyFerret (and Ferret)
SAY   ... setting up demo environment ...
! dsg_tutorial.jnl - *ACM* 04/20

! This is only for V7.6 and up
IF `($ferret_version) LT 7.6` THEN
   SAY The DSG capabilities are available only in Version 7.6 and higher
   exit/script
endif

! Check that they have the datasets.
set mode ignore
set redirect/journal stderr

use dsg_tao5daysst_timeseries.nc
let ok = `T_25,return=isready`
if `ok eq 0` THEN
   SAY The DSG example datasets are not installed. Update the datasets at \
https://github.com/NOAA-PMEL/FerretDatasets
   exit/script
endif
cancel variable ok
cancel data/all
cancel redirect
cancel mode ignore

! Clear any program state left by previous activities
! and set the plot window.
CANCEL REGION
CANCEL VARIABLES/ALL
CANCEL DATA/ALL
CANCEL VIEWPORTS
CANCEL MODE LOGO


!  Now start...

SET MODE VERIFY      ! show command file lines at the screen
!
! ****** An intro to Discrete Sampling Geometries capabilities in PyFerret/Ferret ******

! ****** April 2020
!
! This session demonstrates:
! * Open and examine the file
! * Subset the feature collection
! * Line plots of the subset
! * Analysis operations on the Features
! * Model/feature comparisons
!
!
! netCDF-CF-DSG datasets
!
! Attributes in the file informs Ferret that this is a Feature Collection
! time series collection organized as a Discrete Sampling Geometries dataset.
! The data is an ERDDAP output, using "save as .ncCF"
!
! We start this exploration with a TimeSeries feature collection.
! The instance dimension maps to the ensemble (E) axis (70 features)
! The observations dimension maps to T, because these are time series.
! The observation variables appear as 2D, with the T length equal to the
! observations dimension of the netCDF file.  The actual array that gets
! stored in memory will not match this -- it is the 1D contiguous ragged
! array.

! ********************************************************************
pause

use dsg_tao5daysst_timeseries.nc
show data

! ********************************************************************
pause

! The Feature-type is shown as part of the header.  
! Internally Ferret creates a "translation" grid based upon the units and
! coordinate range for each relevant axis of the dataset, which allows the
! gridded coordinate formatting routines to be used for DSG variables.
! The output of SHOW DATA/FULL command includes extreme coordinate limits of 
! the coordinates in the data set, as does SHOW GRID

show grid t_25

! ********************************************************************
pause

SET WINDOW/SIZE=0.7/ASPECT=.75:axis   ! default

! Graphics
! Each feature type has a native plot type "PLOT VAR"
! will plot the variable in the currently selected set of features.
!
! First lets make a map showing the locations and names of the stations.
! This is nothin nothing new, draw a map and overlay the locations with PLOT/VS

go basemap x=140:360 y=-40:40 20
plot/vs/over/nolabel/color=blue/symbol=19/siz=0.2/thick longitude, latitude

! ********************************************************************
pause


set window/clear/siz=0.5/asp=0.6

! Now plot all of the time series in the collection at once.
! Since the plot will have so many time series lines, we choose
! not to make a key; just 70 blue lines.
! Ferret knows these are time series, and it understands DSG coordinates
! internally, much as it would understand gridded coordinates.  So the
! plot is properly formatted and self-describing.

plot/color=blue/line/nokey t_25

! ********************************************************************
pause


! Constraints
! PyFerret standard world coordinate limits qualifiers, X, Y, Z, T and E
! work much as they would with a gridded dataset -- i.e. they control the
! region displayed by the graphics and the data that gets plotted or listed.
! This plot has fewer lines, so automatically give each one a new color or
! style. The legend labels are the profile station IDs from the file.

plot/thick/x=130e:170e/y=8s:5n/T=1-FEB-2017:15-APR-2017 T_25

! or equivalently, 
! plot/thick t_25[x=130e:170e,y=8s:5n,T=1-FEB-2017:15-APR-2017] T_25

! ********************************************************************
pause

! Masking
! To select features (individual time series, profiles or trajectories)
! define a feature-mask. 
! SET DATA/FMASK=   (or USE/FMASK=) applies the mask to the dataset 
! until it is cancelled. A listing shows what mask is in place, and 
! lists the data selected. We have also constrained the listing in time.

let wmo_mask = IF wmo_platform_code EQ 51011 \
               OR wmo_platform_code EQ 52313 then 1

use/fmask=wmo_mask dsg_tao5daysst_timeseries.nc

list/t=1-jan-2017:25-feb-2017 t_25

plot/thick t_25

! ********************************************************************

pause
set window/clear/siz=0.5/asp=0.8

cancel data/all
cancel variable/all

! Other Feature-types:

! Profiles
! Profile datasets, like timeseries, are drawn as lines of data at a
! collection of stations. The legend labels are the profile station ID’s
! from the file. Subsetting and masking is done in the same way as for 
! timeseries data.

! ********************************************************************
pause

use dsg_pmelchukchi_profiles_subset
show data

plot/thick sigma_t
pause

! Another plot style uses the RIBBON/VS plot command, with 3 arguments: the 
! locations in two directions, and the variable to use for color. Time on the 
! horizontal axis will result in a formatted time axis. Or specify Longitude 
! or latitude on the horizontal axis.

ribbon/vs/thick time, depth, sal


! ********************************************************************
pause

cancel data/all
cancel variable/all
set window/clear/siz=0.5/asp=0.7

! Trajectories
! Trajectory data has longitude, latitude, time and measurements along
! the trajectory paths.  The native plot type is a ribbon plot, location
! colored by measurement.  The PLOT command automatically draws a ribbon
! plot.  The usual plot qualifiers apply, setting color levels, palette,
! and so on.

use dsg_socat_trajectory_subset.nc
plot/thick/palette=plasma fco2_recommended
go fland 5 black

! ********************************************************************
pause

! Or, color by the trajectory ID, so that each one has a color. If there
! are few enough trajectories, the ID's are labeled along the colorbar.

go basemap x=130:240 y=25:80 5 black
plot/over/nolabel/thick/palette=ten_by_levels/key=horiz expocode


! ********************************************************************
pause

set window/clear/siz=0.5/asp=0.6

! Working with trajectory data as a time series
! For each observation along a trajectory we have a time coordinate
! as well as longitude and latitude. This means the data can be viewed
! as a set of time series. Change to a timeseries view with USE/FEATURETYPE.
! This can be applied when first opening the data or on an open dataset.

use/featuretype=timeseries dsg_socat_trajectory_subset.nc
plot fco2_recommended

pause
! And to ignore the DSG-specific elements of the file but use it as if
! we were running pre-V7.6 Ferret,  /FEATURETYPE=none initializes the
! dataset as a non-DSG file.

! Note how coordinate information is not automatically applied when
! working with the data in this mode

use/featuretype=none dsg_socat_trajectory_subset.nc
plot fco2_recommended

! ********************************************************************
pause

cancel data/all
cancel variable/all


! ********************************************************************


! Let's take a quick look at Point data.  The data is very simple,
! with all information on the E axis. Each point is a feature.

use dsg_point_example
show data

plot/thick/lev=v larvae_size



! ********************************************************************
pause

! Changing gears now, from graphics to some of the analysis we might
! do with any dataset.

! User-defined variables
! Standard LET syntax works as always on DSG variables with only subtle differences.
! For instance, transformations apply within each feature, not over the whole region.
!
! Returning to our timeseries dataset, compute the maximum temperature reached
! and the number of valid data in each time series during Jan-March of 2017

use dsg_tao5daysst_timeseries

LET t_max = t_25[T=1-JAN-2017:31-Mar-2017@MAX]
LET t_ngood = t_25[T=1-JAN-2017:31-MAR-2017@NGD]

list/E=1:15 t_max, t_ngood
pause

! The SAVE command will write new DSG datasets containing subsets or computed
! variables.  Do not write the ID, Rowsize, or coordinate variables. They will
! automatically be added to the file.


use dsg_tao5daysst_timeseries
save/clobber/file=my_southern_stations.nc/x=0:180/y=-20:0 t_25

cancel data/all
use my_southern_stations.nc
show data


! ********************************************************************
pause
cancel data/all
sp rm my_southern_stations.nc

! DSG data differencing with model or other gridded data
!
! To sample data from the model grid, define a regridding operation,
! G= to "regrid" a variable on a rectangular grid onto the coordinate
! collection implied by a Discrete Sampling Geometry, the locations and 
! times of the station data.

! Open an NCEP reanalysis dataset and compare the potential temperature
! data with the TAO buoy Timeseries data.

use dsg_tao5daysst_timeseries
use http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis/surface/pottmp.sig995.2017.nc

show data 2

! ********************************************************************
pause
set window/clear/siz=0.5/asp=0.6

! Plot the gridded data sampled at the DSG space-time coordinates
! Note that if the amount of model data that must be accessed
! is large, Ferret dynamic memory management will apply scatter/
! gather to perform the computation in chunks

plot/x=165:170/y=0:10 pottmp[d=2,g=t_25[d=1]]

pause

! Compute the difference between observed and gridded values and plot
! the difference for the timeseries in the Atlantic Ocean. The NCEP 
! temperature is in Degrees K, so convert to C

let grid_t = pottmp[d=2,g=t_25[d=1]] - 273.15
let/title="Timeseries - Gridded"/units="Deg C" diff = t_25[d=1] - grid_t

plot/x=300:360 diff

! ********************************************************************

pause
! Regridding DSG collections to a fixed grid allows for comparison 
! between features, treating the collection as an ensemble.

! For Timeseries datasets, define a fixed time axis and regrid a set 
! of DSG timeseries to that axis.  The result is a Time by E grid where 
! E is station number. 

! Likewise for Profile collections, define a fixed depth axis and 
! regrid the DSG profiles to that axis. The result is a grid in Depth 
! E where E is station number.

use Tao5daySst_timeseries_dsg
define axis/t="15-jan-2017:12:00":21-apr-2017:10/unit=days tuniform
let T_gridded= t_25[gt=tuniform]

show grid t_gridded

plot T_gridded[m=3] - T_gridded[m=2]

plot T_gridded[E=@ave]   ! ensemble average of all time series




! dsg_tutorial is now completed.
