#
# platform_specific_includes.mk.x86_64-linux
#
# This file is included in the External Function Makefiles and defines
# platform specific macros

# this assumes INSTALL_FER_DIR and PYTHON_EXE has already been defined
# in site_specific.mk

INCLUDES	= -I. -I../ef_utility -I../ef_utility/ferret_cmn

CC		= gcc
CFLAGS		= -fPIC -m64 -Ddouble_p -O $(INCLUDES)
CFLAGS_DEBUG	= -O0 -g

FC		= gfortran
F77		= gfortran
FFLAGS		= -fPIC -m64 -Ddouble_p -fno-second-underscore \
		  -fno-backslash -fdollar-ok -ffixed-line-length-132 \
		  -fdefault-real-8 -fdefault-double-8 -O $(INCLUDES)
FFLAGS_DEBUG	= -O0 -g -fbounds-check 

LD		= gfortran
LD_DYN_FLAGS	= -fPIC -m64 -shared -Wl,--no-undefined
# Some compilers add an OS spec between libpyferret and .so
# This also takes care of whether to use lib or lib64
LIBPYFERRET	= $(wildcard $(INSTALL_FER_DIR)/lib*/$(PYTHON_EXE)/site-packages/pyferret/libpyferret*.so)
LIBPYFERRET_DIR	= $(shell dirname $(LIBPYFERRET))
LIBPYFERRET_NAM	= $(shell basename -s .so $(LIBPYFERRET) | sed -e 's/libpyferret/pyferret/' )
SYSLIBS		= ../ef_utility/copy_ferret_ef_mem_subsc.o -L$(LIBPYFERRET_DIR) -l$(LIBPYFERRET_NAM)

# Directly compile the .F source files to the .o object files
# since gfortran can handle the C compiler directives in Fortran code
%.o : %.F
	$(FC) $(FFLAGS) -c $*.F -o $*.o

